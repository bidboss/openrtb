// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package request

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c9d2b01DecodeGithubComBsmOpenrtbNativeRequest(in *jlexer.Lexer, out *Request) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ver":
			out.Ver = string(in.String())
		case "layout":
			out.LayoutID = LayoutID(in.Int())
		case "adunit":
			out.AdUnitID = AdUnitID(in.Int())
		case "context":
			out.ContextTypeID = ContextTypeID(in.Int())
		case "contextsubtype":
			out.ContextSubTypeID = ContextSubTypeID(in.Int())
		case "plcmttype":
			out.PlacementTypeID = PlacementTypeID(in.Int())
		case "plcmtcnt":
			out.PlacementCount = int(in.Int())
		case "seq":
			out.Sequence = int(in.Int())
		case "assets":
			if in.IsNull() {
				in.Skip()
				out.Assets = nil
			} else {
				in.Delim('[')
				if out.Assets == nil {
					if !in.IsDelim(']') {
						out.Assets = make([]Asset, 0, 1)
					} else {
						out.Assets = []Asset{}
					}
				} else {
					out.Assets = (out.Assets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Asset
					(v1).UnmarshalEasyJSON(in)
					out.Assets = append(out.Assets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c9d2b01EncodeGithubComBsmOpenrtbNativeRequest(out *jwriter.Writer, in Request) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ver != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ver\":")
		out.String(string(in.Ver))
	}
	if in.LayoutID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"layout\":")
		out.Int(int(in.LayoutID))
	}
	if in.AdUnitID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adunit\":")
		out.Int(int(in.AdUnitID))
	}
	if in.ContextTypeID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"context\":")
		out.Int(int(in.ContextTypeID))
	}
	if in.ContextSubTypeID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contextsubtype\":")
		out.Int(int(in.ContextSubTypeID))
	}
	if in.PlacementTypeID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"plcmttype\":")
		out.Int(int(in.PlacementTypeID))
	}
	if in.PlacementCount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"plcmtcnt\":")
		out.Int(int(in.PlacementCount))
	}
	if in.Sequence != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"seq\":")
		out.Int(int(in.Sequence))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"assets\":")
	if in.Assets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.Assets {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Request) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c9d2b01EncodeGithubComBsmOpenrtbNativeRequest(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Request) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c9d2b01EncodeGithubComBsmOpenrtbNativeRequest(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Request) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c9d2b01DecodeGithubComBsmOpenrtbNativeRequest(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Request) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c9d2b01DecodeGithubComBsmOpenrtbNativeRequest(l, v)
}
