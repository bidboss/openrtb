// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson31527abDecodeGithubComBsmOpenrtb(in *jlexer.Lexer, out *Bid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "impid":
			out.ImpID = string(in.String())
		case "price":
			out.Price = float64(in.Float64())
		case "adid":
			out.AdID = string(in.String())
		case "nurl":
			out.NURL = string(in.String())
		case "burl":
			out.BURL = string(in.String())
		case "lurl":
			out.LURL = string(in.String())
		case "adm":
			out.AdMarkup = string(in.String())
		case "adomain":
			if in.IsNull() {
				in.Skip()
				out.AdvDomain = nil
			} else {
				in.Delim('[')
				if out.AdvDomain == nil {
					if !in.IsDelim(']') {
						out.AdvDomain = make([]string, 0, 4)
					} else {
						out.AdvDomain = []string{}
					}
				} else {
					out.AdvDomain = (out.AdvDomain)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.AdvDomain = append(out.AdvDomain, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bundle":
			out.Bundle = string(in.String())
		case "iurl":
			out.IURL = string(in.String())
		case "cid":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CampaignID).UnmarshalJSON(data))
			}
		case "crid":
			out.CreativeID = string(in.String())
		case "tactic":
			out.Tactic = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Cat = append(out.Cat, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "attr":
			if in.IsNull() {
				in.Skip()
				out.Attr = nil
			} else {
				in.Delim('[')
				if out.Attr == nil {
					if !in.IsDelim(']') {
						out.Attr = make([]int, 0, 8)
					} else {
						out.Attr = []int{}
					}
				} else {
					out.Attr = (out.Attr)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.Attr = append(out.Attr, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			out.API = int(in.Int())
		case "protocol":
			out.Protocol = int(in.Int())
		case "qagmediarating":
			out.QAGMediaRating = int(in.Int())
		case "language":
			out.Language = string(in.String())
		case "dealid":
			out.DealID = string(in.String())
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "wratio":
			out.WRatio = int(in.Int())
		case "hratio":
			out.HRatio = int(in.Int())
		case "exp":
			out.Exp = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson31527abEncodeGithubComBsmOpenrtb(out *jwriter.Writer, in Bid) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"impid\":")
	out.String(string(in.ImpID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"price\":")
	out.Float64(float64(in.Price))
	if in.AdID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adid\":")
		out.String(string(in.AdID))
	}
	if in.NURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nurl\":")
		out.String(string(in.NURL))
	}
	if in.BURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"burl\":")
		out.String(string(in.BURL))
	}
	if in.LURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lurl\":")
		out.String(string(in.LURL))
	}
	if in.AdMarkup != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adm\":")
		out.String(string(in.AdMarkup))
	}
	if len(in.AdvDomain) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"adomain\":")
		if in.AdvDomain == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.AdvDomain {
				if v4 > 0 {
					out.RawByte(',')
				}
				out.String(string(v5))
			}
			out.RawByte(']')
		}
	}
	if in.Bundle != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bundle\":")
		out.String(string(in.Bundle))
	}
	if in.IURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"iurl\":")
		out.String(string(in.IURL))
	}
	if in.CampaignID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cid\":")
		out.String(string(in.CampaignID))
	}
	if in.CreativeID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"crid\":")
		out.String(string(in.CreativeID))
	}
	if in.Tactic != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tactic\":")
		out.String(string(in.Tactic))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Cat {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	if len(in.Attr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"attr\":")
		if in.Attr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attr {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	if in.API != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		out.Int(int(in.API))
	}
	if in.Protocol != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"protocol\":")
		out.Int(int(in.Protocol))
	}
	if in.QAGMediaRating != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"qagmediarating\":")
		out.Int(int(in.QAGMediaRating))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.DealID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dealid\":")
		out.String(string(in.DealID))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Int(int(in.H))
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Int(int(in.W))
	}
	if in.WRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wratio\":")
		out.Int(int(in.WRatio))
	}
	if in.HRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hratio\":")
		out.Int(int(in.HRatio))
	}
	if in.Exp != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exp\":")
		out.Int(int(in.Exp))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bid) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson31527abEncodeGithubComBsmOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bid) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson31527abEncodeGithubComBsmOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bid) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson31527abDecodeGithubComBsmOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bid) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson31527abDecodeGithubComBsmOpenrtb(l, v)
}
