// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC16456caDecodeGithubComBsmOpenrtb(in *jlexer.Lexer, out *Banner) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "w":
			out.W = int(in.Int())
		case "h":
			out.H = int(in.Int())
		case "format":
			if in.IsNull() {
				in.Skip()
				out.Format = nil
			} else {
				in.Delim('[')
				if out.Format == nil {
					if !in.IsDelim(']') {
						out.Format = make([]Format, 0, 1)
					} else {
						out.Format = []Format{}
					}
				} else {
					out.Format = (out.Format)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Format
					(v1).UnmarshalEasyJSON(in)
					out.Format = append(out.Format, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wmax":
			out.WMax = int(in.Int())
		case "hmax":
			out.HMax = int(in.Int())
		case "wmin":
			out.WMin = int(in.Int())
		case "hmin":
			out.HMin = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "btype":
			if in.IsNull() {
				in.Skip()
				out.BType = nil
			} else {
				in.Delim('[')
				if out.BType == nil {
					if !in.IsDelim(']') {
						out.BType = make([]int, 0, 8)
					} else {
						out.BType = []int{}
					}
				} else {
					out.BType = (out.BType)[:0]
				}
				for !in.IsDelim(']') {
					var v2 int
					v2 = int(in.Int())
					out.BType = append(out.BType, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]int, 0, 8)
					} else {
						out.BAttr = []int{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v3 int
					v3 = int(in.Int())
					out.BAttr = append(out.BAttr, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pos":
			out.Pos = int(in.Int())
		case "mimes":
			if in.IsNull() {
				in.Skip()
				out.Mimes = nil
			} else {
				in.Delim('[')
				if out.Mimes == nil {
					if !in.IsDelim(']') {
						out.Mimes = make([]string, 0, 4)
					} else {
						out.Mimes = []string{}
					}
				} else {
					out.Mimes = (out.Mimes)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Mimes = append(out.Mimes, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topframe":
			out.TopFrame = int(in.Int())
		case "expdir":
			if in.IsNull() {
				in.Skip()
				out.ExpDir = nil
			} else {
				in.Delim('[')
				if out.ExpDir == nil {
					if !in.IsDelim(']') {
						out.ExpDir = make([]int, 0, 8)
					} else {
						out.ExpDir = []int{}
					}
				} else {
					out.ExpDir = (out.ExpDir)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.ExpDir = append(out.ExpDir, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "api":
			if in.IsNull() {
				in.Skip()
				out.Api = nil
			} else {
				in.Delim('[')
				if out.Api == nil {
					if !in.IsDelim(']') {
						out.Api = make([]int, 0, 8)
					} else {
						out.Api = []int{}
					}
				} else {
					out.Api = (out.Api)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int
					v6 = int(in.Int())
					out.Api = append(out.Api, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC16456caEncodeGithubComBsmOpenrtb(out *jwriter.Writer, in Banner) {
	out.RawByte('{')
	first := true
	_ = first
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Int(int(in.W))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Int(int(in.H))
	}
	if len(in.Format) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"format\":")
		if in.Format == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Format {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.WMax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wmax\":")
		out.Int(int(in.WMax))
	}
	if in.HMax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hmax\":")
		out.Int(int(in.HMax))
	}
	if in.WMin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wmin\":")
		out.Int(int(in.WMin))
	}
	if in.HMin != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hmin\":")
		out.Int(int(in.HMin))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if len(in.BType) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"btype\":")
		if in.BType == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.BType {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v10))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.BAttr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.BAttr {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	if in.Pos != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pos\":")
		out.Int(int(in.Pos))
	}
	if len(in.Mimes) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mimes\":")
		if in.Mimes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Mimes {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.TopFrame != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"topframe\":")
		out.Int(int(in.TopFrame))
	}
	if len(in.ExpDir) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"expdir\":")
		if in.ExpDir == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.ExpDir {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v16))
			}
			out.RawByte(']')
		}
	}
	if len(in.Api) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.Api == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Api {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Banner) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC16456caEncodeGithubComBsmOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Banner) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC16456caEncodeGithubComBsmOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Banner) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC16456caDecodeGithubComBsmOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Banner) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC16456caDecodeGithubComBsmOpenrtb(l, v)
}
