// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3073ac56DecodeGithubComBsmOpenrtb(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.UA = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "dnt":
			out.DNT = int(in.Int())
		case "lmt":
			out.LMT = int(in.Int())
		case "ip":
			out.IP = string(in.String())
		case "ipv6":
			out.IPv6 = string(in.String())
		case "devicetype":
			out.DeviceType = int(in.Int())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "osv":
			out.OSVer = string(in.String())
		case "hwv":
			out.HwVer = string(in.String())
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "ppi":
			out.PPI = int(in.Int())
		case "pxratio":
			out.PxRatio = float64(in.Float64())
		case "js":
			out.JS = int(in.Int())
		case "geofetch":
			out.GeoFetch = int(in.Int())
		case "flashver":
			out.FlashVer = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "carrier":
			out.Carrier = string(in.String())
		case "mccmnc":
			out.MCCMNC = string(in.String())
		case "connectiontype":
			out.ConnType = int(in.Int())
		case "ifa":
			out.IFA = string(in.String())
		case "didsha1":
			out.IDSHA1 = string(in.String())
		case "didmd5":
			out.IDMD5 = string(in.String())
		case "dpidsha1":
			out.PIDSHA1 = string(in.String())
		case "dpidmd5":
			out.PIDMD5 = string(in.String())
		case "macsha1":
			out.MacSHA1 = string(in.String())
		case "macmd5":
			out.MacMD5 = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3073ac56EncodeGithubComBsmOpenrtb(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ua\":")
		out.String(string(in.UA))
	}
	if in.Geo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geo\":")
		if in.Geo == nil {
			out.RawString("null")
		} else {
			(*in.Geo).MarshalEasyJSON(out)
		}
	}
	if in.DNT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dnt\":")
		out.Int(int(in.DNT))
	}
	if in.LMT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lmt\":")
		out.Int(int(in.LMT))
	}
	if in.IP != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ip\":")
		out.String(string(in.IP))
	}
	if in.IPv6 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ipv6\":")
		out.String(string(in.IPv6))
	}
	if in.DeviceType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"devicetype\":")
		out.Int(int(in.DeviceType))
	}
	if in.Make != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"make\":")
		out.String(string(in.Make))
	}
	if in.Model != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"model\":")
		out.String(string(in.Model))
	}
	if in.OS != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"os\":")
		out.String(string(in.OS))
	}
	if in.OSVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"osv\":")
		out.String(string(in.OSVer))
	}
	if in.HwVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hwv\":")
		out.String(string(in.HwVer))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Int(int(in.H))
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Int(int(in.W))
	}
	if in.PPI != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ppi\":")
		out.Int(int(in.PPI))
	}
	if in.PxRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pxratio\":")
		out.Float64(float64(in.PxRatio))
	}
	if in.JS != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"js\":")
		out.Int(int(in.JS))
	}
	if in.GeoFetch != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geofetch\":")
		out.Int(int(in.GeoFetch))
	}
	if in.FlashVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"flashver\":")
		out.String(string(in.FlashVer))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Carrier != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"carrier\":")
		out.String(string(in.Carrier))
	}
	if in.MCCMNC != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mccmnc\":")
		out.String(string(in.MCCMNC))
	}
	if in.ConnType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectiontype\":")
		out.Int(int(in.ConnType))
	}
	if in.IFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ifa\":")
		out.String(string(in.IFA))
	}
	if in.IDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didsha1\":")
		out.String(string(in.IDSHA1))
	}
	if in.IDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didmd5\":")
		out.String(string(in.IDMD5))
	}
	if in.PIDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidsha1\":")
		out.String(string(in.PIDSHA1))
	}
	if in.PIDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidmd5\":")
		out.String(string(in.PIDMD5))
	}
	if in.MacSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macsha1\":")
		out.String(string(in.MacSHA1))
	}
	if in.MacMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macmd5\":")
		out.String(string(in.MacMD5))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Device) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3073ac56EncodeGithubComBsmOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Device) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3073ac56EncodeGithubComBsmOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Device) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3073ac56DecodeGithubComBsmOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Device) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3073ac56DecodeGithubComBsmOpenrtb(l, v)
}
