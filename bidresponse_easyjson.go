// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson10eb023eDecodeGithubComBsmOpenrtb(in *jlexer.Lexer, out *BidResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "seatbid":
			if in.IsNull() {
				in.Skip()
				out.SeatBid = nil
			} else {
				in.Delim('[')
				if out.SeatBid == nil {
					if !in.IsDelim(']') {
						out.SeatBid = make([]SeatBid, 0, 1)
					} else {
						out.SeatBid = []SeatBid{}
					}
				} else {
					out.SeatBid = (out.SeatBid)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SeatBid
					easyjson10eb023eDecodeGithubComBsmOpenrtb1(in, &v1)
					out.SeatBid = append(out.SeatBid, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bidid":
			out.BidID = string(in.String())
		case "cur":
			out.Currency = string(in.String())
		case "customdata":
			out.CustomData = string(in.String())
		case "nbr":
			out.NBR = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10eb023eEncodeGithubComBsmOpenrtb(out *jwriter.Writer, in BidResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"seatbid\":")
	if in.SeatBid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.SeatBid {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson10eb023eEncodeGithubComBsmOpenrtb1(out, v3)
		}
		out.RawByte(']')
	}
	if in.BidID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidid\":")
		out.String(string(in.BidID))
	}
	if in.Currency != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cur\":")
		out.String(string(in.Currency))
	}
	if in.CustomData != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"customdata\":")
		out.String(string(in.CustomData))
	}
	if in.NBR != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"nbr\":")
		out.Int(int(in.NBR))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson10eb023eEncodeGithubComBsmOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson10eb023eEncodeGithubComBsmOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson10eb023eDecodeGithubComBsmOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson10eb023eDecodeGithubComBsmOpenrtb(l, v)
}
func easyjson10eb023eDecodeGithubComBsmOpenrtb1(in *jlexer.Lexer, out *SeatBid) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bid":
			if in.IsNull() {
				in.Skip()
				out.Bid = nil
			} else {
				in.Delim('[')
				if out.Bid == nil {
					if !in.IsDelim(']') {
						out.Bid = make([]Bid, 0, 1)
					} else {
						out.Bid = []Bid{}
					}
				} else {
					out.Bid = (out.Bid)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Bid
					(v4).UnmarshalEasyJSON(in)
					out.Bid = append(out.Bid, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seat":
			out.Seat = string(in.String())
		case "group":
			out.Group = int(in.Int())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson10eb023eEncodeGithubComBsmOpenrtb1(out *jwriter.Writer, in SeatBid) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"bid\":")
	if in.Bid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.Bid {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
	if in.Seat != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"seat\":")
		out.String(string(in.Seat))
	}
	if in.Group != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"group\":")
		out.Int(int(in.Group))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
