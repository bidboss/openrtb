// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package openrtb

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89fe9b30DecodeGithubComBsmOpenrtb(in *jlexer.Lexer, out *BidRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "imp":
			if in.IsNull() {
				in.Skip()
				out.Imp = nil
			} else {
				in.Delim('[')
				if out.Imp == nil {
					if !in.IsDelim(']') {
						out.Imp = make([]Impression, 0, 1)
					} else {
						out.Imp = []Impression{}
					}
				} else {
					out.Imp = (out.Imp)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Impression
					easyjson89fe9b30DecodeGithubComBsmOpenrtb1(in, &v1)
					out.Imp = append(out.Imp, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "site":
			if in.IsNull() {
				in.Skip()
				out.Site = nil
			} else {
				if out.Site == nil {
					out.Site = new(Site)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb2(in, &*out.Site)
			}
		case "app":
			if in.IsNull() {
				in.Skip()
				out.App = nil
			} else {
				if out.App == nil {
					out.App = new(App)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb3(in, &*out.App)
			}
		case "device":
			if in.IsNull() {
				in.Skip()
				out.Device = nil
			} else {
				if out.Device == nil {
					out.Device = new(Device)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb4(in, &*out.Device)
			}
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		case "test":
			out.Test = int(in.Int())
		case "at":
			out.AuctionType = int(in.Int())
		case "tmax":
			out.TMax = int(in.Int())
		case "wseat":
			if in.IsNull() {
				in.Skip()
				out.WSeat = nil
			} else {
				in.Delim('[')
				if out.WSeat == nil {
					if !in.IsDelim(']') {
						out.WSeat = make([]string, 0, 4)
					} else {
						out.WSeat = []string{}
					}
				} else {
					out.WSeat = (out.WSeat)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.WSeat = append(out.WSeat, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bseat":
			if in.IsNull() {
				in.Skip()
				out.BSeat = nil
			} else {
				in.Delim('[')
				if out.BSeat == nil {
					if !in.IsDelim(']') {
						out.BSeat = make([]string, 0, 4)
					} else {
						out.BSeat = []string{}
					}
				} else {
					out.BSeat = (out.BSeat)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.BSeat = append(out.BSeat, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "wlang":
			if in.IsNull() {
				in.Skip()
				out.WLang = nil
			} else {
				in.Delim('[')
				if out.WLang == nil {
					if !in.IsDelim(']') {
						out.WLang = make([]string, 0, 4)
					} else {
						out.WLang = []string{}
					}
				} else {
					out.WLang = (out.WLang)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.WLang = append(out.WLang, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "allimps":
			out.AllImps = int(in.Int())
		case "cur":
			if in.IsNull() {
				in.Skip()
				out.Cur = nil
			} else {
				in.Delim('[')
				if out.Cur == nil {
					if !in.IsDelim(']') {
						out.Cur = make([]string, 0, 4)
					} else {
						out.Cur = []string{}
					}
				} else {
					out.Cur = (out.Cur)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.Cur = append(out.Cur, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bcat":
			if in.IsNull() {
				in.Skip()
				out.Bcat = nil
			} else {
				in.Delim('[')
				if out.Bcat == nil {
					if !in.IsDelim(']') {
						out.Bcat = make([]string, 0, 4)
					} else {
						out.Bcat = []string{}
					}
				} else {
					out.Bcat = (out.Bcat)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Bcat = append(out.Bcat, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "badv":
			if in.IsNull() {
				in.Skip()
				out.BAdv = nil
			} else {
				in.Delim('[')
				if out.BAdv == nil {
					if !in.IsDelim(']') {
						out.BAdv = make([]string, 0, 4)
					} else {
						out.BAdv = []string{}
					}
				} else {
					out.BAdv = (out.BAdv)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.BAdv = append(out.BAdv, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "bapp":
			if in.IsNull() {
				in.Skip()
				out.BApp = nil
			} else {
				in.Delim('[')
				if out.BApp == nil {
					if !in.IsDelim(']') {
						out.BApp = make([]string, 0, 4)
					} else {
						out.BApp = []string{}
					}
				} else {
					out.BApp = (out.BApp)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.BApp = append(out.BApp, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "regs":
			if in.IsNull() {
				in.Skip()
				out.Regs = nil
			} else {
				if out.Regs == nil {
					out.Regs = new(Regulations)
				}
				(*out.Regs).UnmarshalEasyJSON(in)
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.Pmp = nil
			} else {
				if out.Pmp == nil {
					out.Pmp = new(Pmp)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb5(in, &*out.Pmp)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb(out *jwriter.Writer, in BidRequest) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if len(in.Imp) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"imp\":")
		if in.Imp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Imp {
				if v9 > 0 {
					out.RawByte(',')
				}
				easyjson89fe9b30EncodeGithubComBsmOpenrtb1(out, v10)
			}
			out.RawByte(']')
		}
	}
	if in.Site != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"site\":")
		if in.Site == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb2(out, *in.Site)
		}
	}
	if in.App != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"app\":")
		if in.App == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb3(out, *in.App)
		}
	}
	if in.Device != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"device\":")
		if in.Device == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb4(out, *in.Device)
		}
	}
	if in.User != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"user\":")
		if in.User == nil {
			out.RawString("null")
		} else {
			(*in.User).MarshalEasyJSON(out)
		}
	}
	if in.Test != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"test\":")
		out.Int(int(in.Test))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"at\":")
	out.Int(int(in.AuctionType))
	if in.TMax != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tmax\":")
		out.Int(int(in.TMax))
	}
	if len(in.WSeat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wseat\":")
		if in.WSeat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.WSeat {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if len(in.BSeat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bseat\":")
		if in.BSeat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.BSeat {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.WLang) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"wlang\":")
		if in.WLang == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v15, v16 := range in.WLang {
				if v15 > 0 {
					out.RawByte(',')
				}
				out.String(string(v16))
			}
			out.RawByte(']')
		}
	}
	if in.AllImps != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"allimps\":")
		out.Int(int(in.AllImps))
	}
	if len(in.Cur) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cur\":")
		if in.Cur == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Cur {
				if v17 > 0 {
					out.RawByte(',')
				}
				out.String(string(v18))
			}
			out.RawByte(']')
		}
	}
	if len(in.Bcat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bcat\":")
		if in.Bcat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Bcat {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAdv) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"badv\":")
		if in.BAdv == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.BAdv {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	if len(in.BApp) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bapp\":")
		if in.BApp == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.BApp {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	if in.Regs != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"regs\":")
		if in.Regs == nil {
			out.RawString("null")
		} else {
			(*in.Regs).MarshalEasyJSON(out)
		}
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	if in.Pmp != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pmp\":")
		if in.Pmp == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb5(out, *in.Pmp)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BidRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89fe9b30EncodeGithubComBsmOpenrtb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BidRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89fe9b30EncodeGithubComBsmOpenrtb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BidRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89fe9b30DecodeGithubComBsmOpenrtb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BidRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89fe9b30DecodeGithubComBsmOpenrtb(l, v)
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb5(in *jlexer.Lexer, out *Pmp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "private_auction":
			out.Private = int(in.Int())
		case "deals":
			if in.IsNull() {
				in.Skip()
				out.Deals = nil
			} else {
				in.Delim('[')
				if out.Deals == nil {
					if !in.IsDelim(']') {
						out.Deals = make([]Deal, 0, 1)
					} else {
						out.Deals = []Deal{}
					}
				} else {
					out.Deals = (out.Deals)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Deal
					if data := in.Raw(); in.Ok() {
						in.AddError((v25).UnmarshalJSON(data))
					}
					out.Deals = append(out.Deals, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb5(out *jwriter.Writer, in Pmp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Private != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"private_auction\":")
		out.Int(int(in.Private))
	}
	if len(in.Deals) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"deals\":")
		if in.Deals == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Deals {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Raw((v27).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb4(in *jlexer.Lexer, out *Device) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ua":
			out.UA = string(in.String())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(Geo)
				}
				(*out.Geo).UnmarshalEasyJSON(in)
			}
		case "dnt":
			out.DNT = int(in.Int())
		case "lmt":
			out.LMT = int(in.Int())
		case "ip":
			out.IP = string(in.String())
		case "ipv6":
			out.IPv6 = string(in.String())
		case "devicetype":
			out.DeviceType = int(in.Int())
		case "make":
			out.Make = string(in.String())
		case "model":
			out.Model = string(in.String())
		case "os":
			out.OS = string(in.String())
		case "osv":
			out.OSVer = string(in.String())
		case "hwv":
			out.HwVer = string(in.String())
		case "h":
			out.H = int(in.Int())
		case "w":
			out.W = int(in.Int())
		case "ppi":
			out.PPI = int(in.Int())
		case "pxratio":
			out.PxRatio = float64(in.Float64())
		case "js":
			out.JS = int(in.Int())
		case "geofetch":
			out.GeoFetch = int(in.Int())
		case "flashver":
			out.FlashVer = string(in.String())
		case "language":
			out.Language = string(in.String())
		case "carrier":
			out.Carrier = string(in.String())
		case "mccmnc":
			out.MCCMNC = string(in.String())
		case "connectiontype":
			out.ConnType = int(in.Int())
		case "ifa":
			out.IFA = string(in.String())
		case "didsha1":
			out.IDSHA1 = string(in.String())
		case "didmd5":
			out.IDMD5 = string(in.String())
		case "dpidsha1":
			out.PIDSHA1 = string(in.String())
		case "dpidmd5":
			out.PIDMD5 = string(in.String())
		case "macsha1":
			out.MacSHA1 = string(in.String())
		case "macmd5":
			out.MacMD5 = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb4(out *jwriter.Writer, in Device) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ua\":")
		out.String(string(in.UA))
	}
	if in.Geo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geo\":")
		if in.Geo == nil {
			out.RawString("null")
		} else {
			(*in.Geo).MarshalEasyJSON(out)
		}
	}
	if in.DNT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dnt\":")
		out.Int(int(in.DNT))
	}
	if in.LMT != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"lmt\":")
		out.Int(int(in.LMT))
	}
	if in.IP != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ip\":")
		out.String(string(in.IP))
	}
	if in.IPv6 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ipv6\":")
		out.String(string(in.IPv6))
	}
	if in.DeviceType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"devicetype\":")
		out.Int(int(in.DeviceType))
	}
	if in.Make != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"make\":")
		out.String(string(in.Make))
	}
	if in.Model != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"model\":")
		out.String(string(in.Model))
	}
	if in.OS != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"os\":")
		out.String(string(in.OS))
	}
	if in.OSVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"osv\":")
		out.String(string(in.OSVer))
	}
	if in.HwVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hwv\":")
		out.String(string(in.HwVer))
	}
	if in.H != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"h\":")
		out.Int(int(in.H))
	}
	if in.W != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"w\":")
		out.Int(int(in.W))
	}
	if in.PPI != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ppi\":")
		out.Int(int(in.PPI))
	}
	if in.PxRatio != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pxratio\":")
		out.Float64(float64(in.PxRatio))
	}
	if in.JS != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"js\":")
		out.Int(int(in.JS))
	}
	if in.GeoFetch != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"geofetch\":")
		out.Int(int(in.GeoFetch))
	}
	if in.FlashVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"flashver\":")
		out.String(string(in.FlashVer))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Carrier != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"carrier\":")
		out.String(string(in.Carrier))
	}
	if in.MCCMNC != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mccmnc\":")
		out.String(string(in.MCCMNC))
	}
	if in.ConnType != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"connectiontype\":")
		out.Int(int(in.ConnType))
	}
	if in.IFA != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ifa\":")
		out.String(string(in.IFA))
	}
	if in.IDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didsha1\":")
		out.String(string(in.IDSHA1))
	}
	if in.IDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"didmd5\":")
		out.String(string(in.IDMD5))
	}
	if in.PIDSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidsha1\":")
		out.String(string(in.PIDSHA1))
	}
	if in.PIDMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"dpidmd5\":")
		out.String(string(in.PIDMD5))
	}
	if in.MacSHA1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macsha1\":")
		out.String(string(in.MacSHA1))
	}
	if in.MacMD5 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"macmd5\":")
		out.String(string(in.MacMD5))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb3(in *jlexer.Lexer, out *App) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bundle":
			out.Bundle = string(in.String())
		case "storeurl":
			out.StoreURL = string(in.String())
		case "ver":
			out.Ver = string(in.String())
		case "paid":
			out.Paid = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v28 string
					v28 = string(in.String())
					out.Cat = append(out.Cat, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.SectionCat = append(out.SectionCat, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v30 string
					v30 = string(in.String())
					out.PageCat = append(out.PageCat, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "privacypolicy":
			if in.IsNull() {
				in.Skip()
				out.PrivacyPolicy = nil
			} else {
				if out.PrivacyPolicy == nil {
					out.PrivacyPolicy = new(int)
				}
				*out.PrivacyPolicy = int(in.Int())
			}
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb6(in, &*out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb7(in, &*out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb3(out *jwriter.Writer, in App) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Bundle != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bundle\":")
		out.String(string(in.Bundle))
	}
	if in.StoreURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"storeurl\":")
		out.String(string(in.StoreURL))
	}
	if in.Ver != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ver\":")
		out.String(string(in.Ver))
	}
	if in.Paid != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"paid\":")
		out.Int(int(in.Paid))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v31, v32 := range in.Cat {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.String(string(v32))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sectioncat\":")
		if in.SectionCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.SectionCat {
				if v33 > 0 {
					out.RawByte(',')
				}
				out.String(string(v34))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pagecat\":")
		if in.PageCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.PageCat {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.PrivacyPolicy != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"privacypolicy\":")
		if in.PrivacyPolicy == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.PrivacyPolicy))
		}
	}
	if in.Publisher != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"publisher\":")
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb6(out, *in.Publisher)
		}
	}
	if in.Content != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"content\":")
		if in.Content == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb7(out, *in.Content)
		}
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb7(in *jlexer.Lexer, out *Content) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "episode":
			out.Episode = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "series":
			out.Series = string(in.String())
		case "season":
			out.Season = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "genre":
			out.Genre = string(in.String())
		case "album":
			out.Album = string(in.String())
		case "isrc":
			out.ISRC = string(in.String())
		case "producer":
			if in.IsNull() {
				in.Skip()
				out.Producer = nil
			} else {
				if out.Producer == nil {
					out.Producer = new(Producer)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb8(in, &*out.Producer)
			}
		case "url":
			out.URL = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.Cat = append(out.Cat, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "prodq":
			out.ProdQuality = int(in.Int())
		case "videoquality":
			out.VideoQuality = int(in.Int())
		case "context":
			out.Context = int(in.Int())
		case "contentrating":
			out.ContentRating = string(in.String())
		case "userrating":
			out.UserRating = string(in.String())
		case "qagmediarating":
			out.QAGMediaRating = int(in.Int())
		case "keywords":
			out.Keywords = string(in.String())
		case "livestream":
			out.LiveStream = int(in.Int())
		case "sourcerelationship":
			out.SourceRelationship = int(in.Int())
		case "len":
			out.Len = int(in.Int())
		case "language":
			out.Language = string(in.String())
		case "embeddable":
			out.Embeddable = int(in.Int())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 1)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v38 Data
					(v38).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb7(out *jwriter.Writer, in Content) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Episode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"episode\":")
		out.Int(int(in.Episode))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if in.Series != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"series\":")
		out.String(string(in.Series))
	}
	if in.Season != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"season\":")
		out.String(string(in.Season))
	}
	if in.Artist != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"artist\":")
		out.String(string(in.Artist))
	}
	if in.Genre != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"genre\":")
		out.String(string(in.Genre))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"album\":")
	out.String(string(in.Album))
	if in.ISRC != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"isrc\":")
		out.String(string(in.ISRC))
	}
	if in.Producer != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"producer\":")
		if in.Producer == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb8(out, *in.Producer)
		}
	}
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Cat {
				if v39 > 0 {
					out.RawByte(',')
				}
				out.String(string(v40))
			}
			out.RawByte(']')
		}
	}
	if in.ProdQuality != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"prodq\":")
		out.Int(int(in.ProdQuality))
	}
	if in.VideoQuality != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"videoquality\":")
		out.Int(int(in.VideoQuality))
	}
	if in.Context != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"context\":")
		out.Int(int(in.Context))
	}
	if in.ContentRating != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contentrating\":")
		out.String(string(in.ContentRating))
	}
	if in.UserRating != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"userrating\":")
		out.String(string(in.UserRating))
	}
	if in.QAGMediaRating != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"qagmediarating\":")
		out.Int(int(in.QAGMediaRating))
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if in.LiveStream != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"livestream\":")
		out.Int(int(in.LiveStream))
	}
	if in.SourceRelationship != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sourcerelationship\":")
		out.Int(int(in.SourceRelationship))
	}
	if in.Len != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"len\":")
		out.Int(int(in.Len))
	}
	if in.Language != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language\":")
		out.String(string(in.Language))
	}
	if in.Embeddable != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"embeddable\":")
		out.Int(int(in.Embeddable))
	}
	if len(in.Data) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Data {
				if v41 > 0 {
					out.RawByte(',')
				}
				(v42).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb8(in *jlexer.Lexer, out *Producer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v43 string
					v43 = string(in.String())
					out.Cat = append(out.Cat, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb8(out *jwriter.Writer, in Producer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Cat {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb6(in *jlexer.Lexer, out *Publisher) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v46 string
					v46 = string(in.String())
					out.Cat = append(out.Cat, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domain":
			out.Domain = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb6(out *jwriter.Writer, in Publisher) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v47, v48 := range in.Cat {
				if v47 > 0 {
					out.RawByte(',')
				}
				out.String(string(v48))
			}
			out.RawByte(']')
		}
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb2(in *jlexer.Lexer, out *Site) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "page":
			out.Page = string(in.String())
		case "ref":
			out.Ref = string(in.String())
		case "search":
			out.Search = string(in.String())
		case "mobile":
			out.Mobile = int(in.Int())
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "domain":
			out.Domain = string(in.String())
		case "cat":
			if in.IsNull() {
				in.Skip()
				out.Cat = nil
			} else {
				in.Delim('[')
				if out.Cat == nil {
					if !in.IsDelim(']') {
						out.Cat = make([]string, 0, 4)
					} else {
						out.Cat = []string{}
					}
				} else {
					out.Cat = (out.Cat)[:0]
				}
				for !in.IsDelim(']') {
					var v49 string
					v49 = string(in.String())
					out.Cat = append(out.Cat, v49)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sectioncat":
			if in.IsNull() {
				in.Skip()
				out.SectionCat = nil
			} else {
				in.Delim('[')
				if out.SectionCat == nil {
					if !in.IsDelim(']') {
						out.SectionCat = make([]string, 0, 4)
					} else {
						out.SectionCat = []string{}
					}
				} else {
					out.SectionCat = (out.SectionCat)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.SectionCat = append(out.SectionCat, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pagecat":
			if in.IsNull() {
				in.Skip()
				out.PageCat = nil
			} else {
				in.Delim('[')
				if out.PageCat == nil {
					if !in.IsDelim(']') {
						out.PageCat = make([]string, 0, 4)
					} else {
						out.PageCat = []string{}
					}
				} else {
					out.PageCat = (out.PageCat)[:0]
				}
				for !in.IsDelim(']') {
					var v51 string
					v51 = string(in.String())
					out.PageCat = append(out.PageCat, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "privacypolicy":
			if in.IsNull() {
				in.Skip()
				out.PrivacyPolicy = nil
			} else {
				if out.PrivacyPolicy == nil {
					out.PrivacyPolicy = new(int)
				}
				*out.PrivacyPolicy = int(in.Int())
			}
		case "publisher":
			if in.IsNull() {
				in.Skip()
				out.Publisher = nil
			} else {
				if out.Publisher == nil {
					out.Publisher = new(Publisher)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb6(in, &*out.Publisher)
			}
		case "content":
			if in.IsNull() {
				in.Skip()
				out.Content = nil
			} else {
				if out.Content == nil {
					out.Content = new(Content)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb7(in, &*out.Content)
			}
		case "keywords":
			out.Keywords = string(in.String())
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb2(out *jwriter.Writer, in Site) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Page != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"page\":")
		out.String(string(in.Page))
	}
	if in.Ref != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ref\":")
		out.String(string(in.Ref))
	}
	if in.Search != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"search\":")
		out.String(string(in.Search))
	}
	if in.Mobile != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mobile\":")
		out.Int(int(in.Mobile))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.Domain != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"domain\":")
		out.String(string(in.Domain))
	}
	if len(in.Cat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cat\":")
		if in.Cat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v52, v53 := range in.Cat {
				if v52 > 0 {
					out.RawByte(',')
				}
				out.String(string(v53))
			}
			out.RawByte(']')
		}
	}
	if len(in.SectionCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sectioncat\":")
		if in.SectionCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.SectionCat {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	if len(in.PageCat) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pagecat\":")
		if in.PageCat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.PageCat {
				if v56 > 0 {
					out.RawByte(',')
				}
				out.String(string(v57))
			}
			out.RawByte(']')
		}
	}
	if in.PrivacyPolicy != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"privacypolicy\":")
		if in.PrivacyPolicy == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.PrivacyPolicy))
		}
	}
	if in.Publisher != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"publisher\":")
		if in.Publisher == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb6(out, *in.Publisher)
		}
	}
	if in.Content != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"content\":")
		if in.Content == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb7(out, *in.Content)
		}
	}
	if in.Keywords != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"keywords\":")
		out.String(string(in.Keywords))
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb1(in *jlexer.Lexer, out *Impression) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "banner":
			if in.IsNull() {
				in.Skip()
				out.Banner = nil
			} else {
				if out.Banner == nil {
					out.Banner = new(Banner)
				}
				(*out.Banner).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Video).UnmarshalJSON(data))
				}
			}
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Audio).UnmarshalJSON(data))
				}
			}
		case "native":
			if in.IsNull() {
				in.Skip()
				out.Native = nil
			} else {
				if out.Native == nil {
					out.Native = new(Native)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb9(in, &*out.Native)
			}
		case "pmp":
			if in.IsNull() {
				in.Skip()
				out.Pmp = nil
			} else {
				if out.Pmp == nil {
					out.Pmp = new(Pmp)
				}
				easyjson89fe9b30DecodeGithubComBsmOpenrtb5(in, &*out.Pmp)
			}
		case "displaymanager":
			out.DisplayManager = string(in.String())
		case "displaymanagerver":
			out.DisplayManagerVer = string(in.String())
		case "instl":
			out.Instl = int(in.Int())
		case "tagid":
			out.TagID = string(in.String())
		case "bidfloor":
			out.BidFloor = float64(in.Float64())
		case "bidfloorcur":
			out.BidFloorCurrency = string(in.String())
		case "secure":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Secure).UnmarshalJSON(data))
			}
		case "exp":
			out.Exp = int(in.Int())
		case "iframebuster":
			if in.IsNull() {
				in.Skip()
				out.IFrameBuster = nil
			} else {
				in.Delim('[')
				if out.IFrameBuster == nil {
					if !in.IsDelim(']') {
						out.IFrameBuster = make([]string, 0, 4)
					} else {
						out.IFrameBuster = []string{}
					}
				} else {
					out.IFrameBuster = (out.IFrameBuster)[:0]
				}
				for !in.IsDelim(']') {
					var v58 string
					v58 = string(in.String())
					out.IFrameBuster = append(out.IFrameBuster, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb1(out *jwriter.Writer, in Impression) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.String(string(in.ID))
	if in.Banner != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"banner\":")
		if in.Banner == nil {
			out.RawString("null")
		} else {
			(*in.Banner).MarshalEasyJSON(out)
		}
	}
	if in.Video != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video\":")
		if in.Video == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Video).MarshalJSON())
		}
	}
	if in.Audio != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"audio\":")
		if in.Audio == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Audio).MarshalJSON())
		}
	}
	if in.Native != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"native\":")
		if in.Native == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb9(out, *in.Native)
		}
	}
	if in.Pmp != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pmp\":")
		if in.Pmp == nil {
			out.RawString("null")
		} else {
			easyjson89fe9b30EncodeGithubComBsmOpenrtb5(out, *in.Pmp)
		}
	}
	if in.DisplayManager != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displaymanager\":")
		out.String(string(in.DisplayManager))
	}
	if in.DisplayManagerVer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"displaymanagerver\":")
		out.String(string(in.DisplayManagerVer))
	}
	if in.Instl != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"instl\":")
		out.Int(int(in.Instl))
	}
	if in.TagID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"tagid\":")
		out.String(string(in.TagID))
	}
	if in.BidFloor != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloor\":")
		out.Float64(float64(in.BidFloor))
	}
	if in.BidFloorCurrency != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"bidfloorcur\":")
		out.String(string(in.BidFloorCurrency))
	}
	if in.Secure != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"secure\":")
		out.Int(int(in.Secure))
	}
	if in.Exp != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"exp\":")
		out.Int(int(in.Exp))
	}
	if len(in.IFrameBuster) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"iframebuster\":")
		if in.IFrameBuster == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v59, v60 := range in.IFrameBuster {
				if v59 > 0 {
					out.RawByte(',')
				}
				out.String(string(v60))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson89fe9b30DecodeGithubComBsmOpenrtb9(in *jlexer.Lexer, out *Native) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Request).UnmarshalJSON(data))
			}
		case "ver":
			out.Ver = string(in.String())
		case "api":
			if in.IsNull() {
				in.Skip()
				out.API = nil
			} else {
				in.Delim('[')
				if out.API == nil {
					if !in.IsDelim(']') {
						out.API = make([]int, 0, 8)
					} else {
						out.API = []int{}
					}
				} else {
					out.API = (out.API)[:0]
				}
				for !in.IsDelim(']') {
					var v61 int
					v61 = int(in.Int())
					out.API = append(out.API, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "battr":
			if in.IsNull() {
				in.Skip()
				out.BAttr = nil
			} else {
				in.Delim('[')
				if out.BAttr == nil {
					if !in.IsDelim(']') {
						out.BAttr = make([]int, 0, 8)
					} else {
						out.BAttr = []int{}
					}
				} else {
					out.BAttr = (out.BAttr)[:0]
				}
				for !in.IsDelim(']') {
					var v62 int
					v62 = int(in.Int())
					out.BAttr = append(out.BAttr, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "ext":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Ext).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89fe9b30EncodeGithubComBsmOpenrtb9(out *jwriter.Writer, in Native) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"request\":")
	out.Raw((in.Request).MarshalJSON())
	if in.Ver != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ver\":")
		out.String(string(in.Ver))
	}
	if len(in.API) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"api\":")
		if in.API == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v63, v64 := range in.API {
				if v63 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v64))
			}
			out.RawByte(']')
		}
	}
	if len(in.BAttr) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"battr\":")
		if in.BAttr == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.BAttr {
				if v65 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v66))
			}
			out.RawByte(']')
		}
	}
	if len(in.Ext) != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ext\":")
		out.Raw((in.Ext).MarshalJSON())
	}
	out.RawByte('}')
}
